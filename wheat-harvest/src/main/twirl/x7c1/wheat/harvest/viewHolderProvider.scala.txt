@(parts: x7c1.wheat.harvest.layout.ViewHolderProviderParts)
/**
 * This file is automatically generated by wheat-harvest.
 * Do not modify this file -- YOUR CHANGES WILL BE ERASED!
 */

@parts.declarePackage

@parts.imports

public class @(parts.prefix.ofClass)Provider implements ViewHolderProvider<@(parts.prefix.ofClass)> {

    private final LayoutInflater inflater;

    public @(parts.prefix.ofClass)Provider(Context context){
        this.inflater = LayoutInflater.from(context);
    }

    public @(parts.prefix.ofClass)Provider(LayoutInflater inflater){
        this.inflater = inflater;
    }

    @@Override
    public int layoutId(){
        return R.layout.@(parts.prefix.raw);
    }

    @@Override
    public @(parts.prefix.ofClass) inflateOn(ViewGroup parent){
        return inflate(parent, false);
    }

    @@Override
    public @(parts.prefix.ofClass) inflate(ViewGroup parent, boolean attachToRoot){
        View view = inflater.inflate(R.layout.@(parts.prefix.raw), parent, attachToRoot);
        return factory().createViewHolder(view);
    }

    @@Override
    public @(parts.prefix.ofClass) inflate(){
        return inflate(null, false);
    }

    public static ViewHolderProviderFactory<@(parts.prefix.ofClass)> factory(){
        return new ViewHolderProviderFactory<@(parts.prefix.ofClass)>() {
            @@Override
            public ViewHolderProvider<@(parts.prefix.ofClass)> create(LayoutInflater inflater){
                return new @(parts.prefix.ofClass)Provider(inflater);
            }
            @@Override
            public ViewHolderProvider<@(parts.prefix.ofClass)> create(Context context){
                return new @(parts.prefix.ofClass)Provider(context);
            }
            @@Override
            public @(parts.prefix.ofClass) createViewHolder(View view){
                return new @(parts.prefix.ofClass)(
                    @(parts.arguments)
                );
            }
        };
    }
}
